Access Grants {#grants}
=====================

## Overview ## {#grants-overview}

[=Access Grants=] represent an [=Agent's=] decision to grant access to
some portion of the data in their control to another [=Agent=]. They provide
the context needed to effectively manage permissions on a given [=Agent's=]
data through a compatible access control system.

There are two types of [=Access Grants=]:

* [=Trusted Grants=] are made when a given [=Agent=] trusts another [=Agent=]
    with expanded, administrative-level privilege to the data in their control.
* [=Data Grants=] are made when a given [=Agent=] wishes to share access
    to certain types or specific instances of data in their control.

[=Access Grants=] are recorded in an Agent's [=Access Grant Registry=].

[=Access Invitations=] represent [=Access Grants=] made to [=Agents=] with
unknown or yet-to-be established [=identities=].

Note: See 
[Solid Application Interoperability Operations and API](https://solid.github.io/data-interoperability-panel/api/#grants)
for a detailed explanation of how Access Grants should be processed.

## Data Model ## {#grants-datamodel}

### Summary ### {#grants-datamodel-summary}

<figure id="fig-grants-model">
  <img src="diagrams/grants-model.svg" width=100%/>
  <figcaption>Data model for the Access Grant Registry</figcaption>
</figure>

An [=Agent=] links to [=Access Grant Registry Sets=]
via the [interop:hasAccessGrantRegistrySet](interop.ttl#hasAccessGrantRegistrySet) property.

An [=Access Grant Registry Set=] links to any number of [=Access Grant Registries=]
via the [interop:hasRegistry](interop.ttl#hasRegistry) property.

An [=Access Grant Registry=] links to any number of registered [=Access Grants=]
and [=Access Invitations=] via the
[interop:hasRegistration](interop.ttl#hasRegistration) property.

### Access Grant Registry Set ### {#datamodel-access-registry-set}

An <dfn>Access Grant Registry Set</dfn> is a [=Registry Set=] specifically
made up of [=Access Grant Registries=].

<figure id ="fig-grants-registry-set">
   <figcaption>An [=Access Grant Registry Set=] at
   https://alice.pod.example/profile/grant#set linking to two different
  [=Access Grant Registries=]</figcaption>
  <pre highlight="turtle">
  <#set>
    a interop:AccessGrantRegistrySet;
    interop:hasRegistry &lt;https://alice.pod.example/grants/#registry&gt; ,
                    &lt;https://alice.otherpod.example/grants/#registry&gt; .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classAccessGrantRegistrySet">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3 text-align=left>
        [AccessGrantRegistrySet](interop.ttl#AccessGrantRegistrySet)
        a rdfs:subClassOf [RegistrySet](interop.ttl#RegistrySet)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRegistry</td>
      <td>[Registry](interop.ttl#Registry)</td>
      <td>Link to associated [=Access Grant Registries=]</td>
    </tr>
  </tbody>
</table>

The [AccessGrantRegistrySetShape](#shexAccessGrantRegistrySet) is used to validate
an instance of the [AccessGrantRegistrySet](#classAccessGrantRegistrySet) class.

<pre highlight="turtle" id="shexAccessGrantRegistrySet">
<#AccessGrantRegistrySetShape> {
  a [ interop:AccessGrantRegistrySet ] ;
  interop:hasRegistry IRI+
}
</pre>

The [AccessGrantRegistrySetTree](interop.tree#AccessGrantRegistrySetTree)
is assigned to a resource to ensure it will validate against the
[AccessGrantRegistrySetShape](#shexAccessGrantRegistrySet).

<pre highlight="turtle" id="treeAccessGrantRegistrySet">
<#AccessGrantRegistrySetTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#AccessGrantRegistrySetShape&gt; .
</pre>

### Access Grant Registry ### {#datamodel-access-registry}

An <dfn>Access Grant Registry</dfn> is a collection of
[=Access Grants=] stored in a specific location in a [=pod=].

<figure id="fig-grants-registry">
  <figcaption>An [=Access Grant Registry=] at https://alice.pod.example/grants/#registry
  linking to several registered [=Access Grants=] or
  [=Access Invitations=]</figcaption>
  <pre highlight="turtle">
  <#registry>
    a interop:AccessGrantRegistry ;
    interop:hasRegistration
      &lt;ab3d0023-3860-4358-ae33-8d3af1097b9d#grant&gt; ,
      &lt;ad7b935f-ced9-4ce6-835f-5c6abc046228#grant&gt; ,
      &lt;5ed73c65-ce77-4c8a-8f7e-9715b90307e6#grant&gt; ,
      &lt;2d575cba-3f6c-4c58-bccd-0e6266ba56cf#invitation&gt; .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classAccessGrantRegistry">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [AccessGrantRegistry](interop.ttl#AccessGrantRegistry)
        a rdfs:subClassOf [[#datamodel-agent|Registry]]
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRegistration</td>
      <td>[Registration](interop.ttl#Registration)</td>
      <td>Link to associated [=Access Grants=]</td>
    </tr>
  </tbody>
</table>

The [AccessGrantRegistryShape](#shexAccessGrantRegistry) is used to validate an
instance of the [AccessGrantRegistry](#classAccessGrantRegistry) class.

<pre highlight="turtle" id="shexAccessGrantRegistry">
<#AccessGrantRegistryShape> {
  a [ interop:AccessGrantRegistry ] ;
  interop:hasRegistration IRI*
}
</pre>

The [AccessGrantRegistryTree](interop.tree#AccessGrantRegistryTree) is assigned
to a container resource to ensure that it will validate against the
[AccessGrantRegistryShape](#shexAccessGrantRegistry), and contain only
conformant instances of the [AccessGrantTree](#treeAccessGrant) and
[AccessInvitationTree](#treeAccessInvitation).

<pre highlight="turtle" id="treeAccessGrantRegistry">
<#AccessGrantRegistryTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeContainer ;
  st:validatedBy &lt;interops#AccessGrantRegistryShape&gt; ;
  st:contains <#AccessGrantTree> ,
              <#AccessInvitationTree> ,
              st:AllowNone .
</pre>

### Access Grant ### {#datamodel-access-grant}

Each <dfn>Access Grant</dfn> represents access granted to an
[=Access Grant Subject=], based on access criteria detailed in one or more
[=Access Need Groups=].

Access may be granted to data in
[=Data Registries=] through [=Data Grants=].

Access may be granted to data in [=Remote Data Registries=] through
[=Remote Data Grants=].

Elevated access to [=registries=], [=registry sets=], or the [=identity=]
of the [=Agent=] may be granted through [=Trusted Grants=].

<figure id="fig-grants-grant">
  <figcaption>An [=Access Grant=] at
  https://alice.pod.example/grants/ab3d0023-3860-4358-ae33-8d3af1097b9d#grant
  </figcaption>
  <pre highlight="turtle">
  <#grant>
    a interop:AccessGrant ;
    interop:registeredBy &lt;https://alice.pod.example/profile/id#me&gt; ;
    interop:registeredWith &lt;https://trusted.example/id#agent&gt; ;
    interop:registeredAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:hasAccessGrantSubject &lt;#grant-subject&gt; ;
    interop:hasAccessNeedGroup &lt;#need-group-pm&gt; ;
    interop:hasDataGrant &lt;#data-grant-project&gt; ;
    interop:hasRemoteDataGrant &lt;#remote-data-grant-project&gt; .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classAccessGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [AccessGrant](interop.ttl#AccessGrant)
        a rdfs:subClassOf [Registration](interop.ttl#Registration)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[Agent](#classAgent)</td>
      <td>[=Agent=] that registered the [=Access Grant=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to create the [=Access Grant=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Grant=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Grant=] was updated</td>
    </tr>
    <tr>
      <td>hasAccessGrantSubject</td>
      <td>[AccessGrantSubject](#classAccessGrantSubject)</td>
      <td>Links to the [=Access Grant Subject=] that was granted access.</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>Links to an [=Access Need Group=] associated with the Access Grant.</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to a [=Data Grant=] associated with the Access Grant.</td>
    </tr>
    <tr>
      <td>hasTrustedGrant</td>
      <td>[TrustedGrant](#classTrustedGrant)</td>
      <td>Links to a [=Trusted Grant=] associated with the Access Grant.</td>
    </tr>
    <tr>
      <td>hasRemoteDataGrant</td>
      <td>[RemoteDataGrant](#classRemoteDataGrant)</td>
      <td>Links to a [=Remote Data Grant=] associated with the Access Grant.</td>
    </tr>
  </tbody>
</table>

The [AccessGrantShape](#shexAccessGrant) is used to validate an instance
of the [AccessGrant](#classAccessGrant) class.

<pre highlight="turtle" id="shexAccessGrant">
<#AccessGrantShape> {
  a [ interop:AccessGrant ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:hasAccessGrantSubject @<#:AccessGrantSubject> ;
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+ ;
  ( interop:hasDataGrant @<#:DataGrantShape>+ |
  interop:hasTrustedGrant @<#:TrustedGrantShape>+ |
  interop:hasRemoteDataGrant @<#:RemoteDataGrantShape>+ ) ;
}
</pre>

The [AccessGrantTree](interop.tree#AccessGrantTree) is assigned to a
resource via the [AccessGrantRegistryTree](#treeAccessGrantRegistry), and ensure
that the assigned resource will validate against the
[AccessGrantShape](#shexAccessGrant).

<pre highlight="turtle" id="treeAccessGrant">
<#AccessGrantTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#AccessGrantShape&gt; .
</pre>

### Access Grant Subject ### {#datamodel-access-grant-subject}

An <dfn>Access Grant Subject</dfn> represents a unique combination of
who and what is being granted access. For example, it allows a single [=Agent=]
to be specified, or a given [=Agent=] using a given [=Application=].

<figure id="fig-grants-subject">
  <figcaption>An [=Access Grant Subject=] at
  https://alice.pod.example/grants/ab3d0023-3860-4358-ae33-8d3af1097b9d#grant-subject
  </figcaption>
  <pre highlight="turtle">
  <#grant-subject>
      a interop:AccessGrantSubject ;
      interop:accessByAgent &lt;https://alice.pod.example/profile/id#me&gt; ;
      interop:accessByApplication &lt;https://acmeproject.example/profile/id#application&gt; .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classAccessGrantSubject">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>[AccessGrantSubject](interop.ttl#AccessGrant)</th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>accessByAgent</td>
      <td>[Agent](#classAgent)</td>
      <td>[=Agent=] being granted access</td>
    </tr>
    <tr>
      <td>accessByApplication</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] being granted access</td>
    </tr>
  </tbody>
</table>

The [AccessGrantSubjectShape](#shexAccessGrantSubject) is used to validate
an instance of the [AccessGrantSubject](#classAccessGrantSubject) class.

<pre highlight="turtle" id="shexAccessGrantSubject">
<#AccessGrantSubjectShape> {
  a [ interop:AccessGrantSubject ] ;
  interop:accessGrantSubjectAgent IRI? ;
  interop:accessGrantSubjectApplication IRI?
}
</pre>

### Data Grant ### {#datamodel-data-grant}

A <dfn>Data Grant</dfn> records a decision made by an
[=Agent=] to assign permissions for an [=Access Grant Subject=] to a
[=Data Registration=], in response to a given [=Access Need=] that was
presented to them.

A [=Data Grant=] may have one or more [=Referenced Data Grants=], when the
[=shape tree=] associated via `interop:registeredShapeTree` has one or
more [=Shape Tree References=].

Each [=Data Grant=] has an assigned scope (`interop:scopeOfGrant`), which
determines how permissions are assigned. The following types are
valid for a [=Data Grant=]:

* <b>`interop:AllInstances`</b>
    * Applies to all [=Data Instances=] belonging to
        the associated [=Data Registration=].
    * Permissions will be set for the [=Access Grant Subject=] on the
        [=Data Registration=] container,
        and will be inherited by all member [=Data Instances=].
* <b>`interop:SelectedInstances`</b>
    * Applies only to selected [=Data Instances=]
        belonging to the associated [=Data Registration=], which are linked
        to the [=Data Grant=] via `interop:hasDataInstance`.
    * Permissions will be set for the [=Access Grant Subject=] on
        each [=Data Instance=].
* <b>`interop:NoAccess`</b>
    * Indicates that no access is granted to the [=Access Grant Subject=].
    * Applies to the entire [=Data Registration=] when there are no
        [=Data Instances=] linked via `interop:hasDataInstance`.
    * When there are [=Data Instances=] linked via `interop:hasDataInstance`,
        this scope only applies to them.

When recording a [=Data Grant=] via [[SAI-API#grants-recordgrant]]:

* There must be an [=Access Need=] linked via `interop:satisfiesAccessNeed` that
    belongs to an [=Access Need Group=] linked to the same [=Access Grant=].
* The [=Access Need=] must link back to the [=Data Grant=]
    via `interop:hasDataGrant`.
* [=Access Need=] and [=Data Grant=] must have the same `interop:accessModes`
* [=Access Need=] and [=Data Grant=] must have the same `interop:registeredShapeTree`

<figure id="fig-grants-data-grant">
  <figcaption>An [=Data Grant=] at
  https://alice.pod.example/grants/ab3d0023-3860-4358-ae33-8d3af1097b9d#data-grant-project
  </figcaption>
  <pre highlight="turtle">
  <#data-grant-project>
      a interop:DataGrant ;
      interop:hasAccessGrant <#grant> ;
      interop:satisfiesAccessNeed <#need-project> ;
      interop:registeredShapeTree pm:ProjectTree ;
      interop:hasDataRegistration data:project-tree-reg ;
      interop:accessMode acl:read, acl:write, acl:Control ;
      # Scope grants access to all instances in the project
      # data registration, now and in the future, with no conditions
      interop:scopeOfGrant interop:AllInstances ;
      interop:hasReferencedDataGrant
          <#data-grant-issue> ,
          <#data-grant-task> ,
          <#data-grant-release> ,
          <#data-grant-document> .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [DataGrant](interop.ttl#DataGrant)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasAccessGrant</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[=Access Grant=] that the [=Data Grant=] belongs to</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Access Need=] satisfied by the [=Data Grant=]</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>[=Data Registration=] for the [=shape tree=] that access
      will be granted to</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>[DataRegistration](#classDataRegistration)</td>
      <td>[=Data Registration=] for registeredShapeTree that the
      [=Data Grant=] applies to</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Modes of access granted to the target data at hasRegistration</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td> interop:AllInstances, interop:SelectedInstances,
      interop:NoAccess</td>
      <td>Identifies the access scope of the [=Data Grant=]
        <ul>
          <li>interop:AllInstances - Scope includes
              access to all [=Data Instances=] of the associated
              [=Data Registration=]</li>
          <li>interop:SelectedInstances - Scope includes
              access only to those [=Data Instances=] specifically
              selected by the [=Agent=]</li>
          <li>interop:NoAccess - No access is granted</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>Instance of registeredShapeTree</td>
      <td>Links to a [=Data Instance=] of registeredShapeTree.</td>
    </tr>
    <tr>
      <td>hasReferencedDataGrant</td>
      <td>[ReferencedDataGrant](#classReferencedDataGrant)</td>
      <td>Links to a [=Referenced Data Grant=] when registeredShapeTree
      has references to other shape trees that should be included
      in authorization.</td>
    </tr>
  </tbody>
</table>

The [DataGrantShape](#shexDataGrant) is used to
validate an instance of the [DataGrant](#classDataGrant)
class.

<pre highlight="turtle" id="shexDataGrant">
<#DataGrantShape> {
  a [ interop:DataGrant ] ;
  interop:hasAccessGrant @<#:AccessGrantShape> ;
  interop:satisfiesAccessNeed @<#:AccessNeedShape> ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:scopeOfGrant @<#:DataGrantScopes> ;
  interop:hasDataInstance IRI* ;
  interop:hasReferencedDataGrant @<#:ReferencedDataGrantShape>
}
</pre>

The [DataGrantTree] ensures
that the assigned resource will validate against the
[DataGrantShape](#shexDataGrant).

<pre highlight="turtle" id="treeDataGrant">
<#DataGrantTree>
  a st:ShapeTree ;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops:DataGrantShape&gt; .
</pre>

### Referenced Data Grant ### {#datamodel-referenced-data-grant}

Issue(solid/data-interoperability-panel#124):

A <dfn>Referenced Data Grant</dfn> is linked from a [=Data Grant=], and
records a decision made by an [=Agent=] to assign permissions for an
[=Access Grant Subject=] to a [=Data Registration=], based on a
[=Referenced Access Need=] that was presented to them. It stipulates that the
[=shape tree=] of the [=Referenced Data Grant=] is effectively a "child"
of the [=shape tree=] associated with the parent [=Data Grant=] that
references it.

Like [=Data Grants=], each [=Referenced Data Grant=] has an assigned
scope (`interop:scopeOfGrant`), which
determines how permissions are assigned. The following types are
valid for a [=Referenced Data Grant=]:

* <b>`interop:AllInstances`</b>
    * Applies to all [=Data Instances=] belonging to
        the associated [=Data Registration=].
    * Permissions will be set for
        the [=Access Grant Subject=] on the [=Data Registration=] container,
        and will be inherited by all member [=Data Instances=].
* <b>`interop:InheritInstances`</b>
    *  When the [=Data Grant=] linked via
        `interop:hasDataGrant` has a scope of `interop:SelectedInstances`, and one
        or more [=Data Instances=] are selected, any [=Referenced Data Grants=]
        have the opportunity to narrow their own access scope to only include
        "child" [=Data Instances=] linked to the selected "parent" [=Data Instances=].
    * The link must follow the [=Shape Tree Reference=] between
        the parent [=Data Grant=] shape tree and the [=Referenced Data Grant=]
        shape tree.
    * Permissions are set conditionally for the [=Access Grant Subject=],
        and have the benefit of applying to current and future [=Data Instances=]
        associated with a parent [=Data Instance=].
* <b>`interop:SelectedInstances`</b>
    * Applies only to selected [=Data Instances=]
        belonging to the associated [=Data Registration=], which are linked
        to the [=Data Grant=] via `interop:hasDataInstance`.
    * Permissions will be set for the [=Access Grant Subject=] on
        each [=Data Instance=].
* <b>`interop:NoAccess`</b>
    * Indicates that no access is granted to the [=Access Grant Subject=].
    * Applies to the entire [=Data Registration=] when
        there are no [=Data Instances=] linked via `interop:hasDataInstance`.
    * When there are [=Data Instances=] linked via `interop:hasDataInstance`,
        this scope only applies to them.

When recording a [=Referenced Data Grant=] via [[SAI-API#grants-recordgrant]]:

* There must be a [=Referenced Access Need=] linked via
    `interop:satisfiesAccessNeed` that
    belongs to an [=Access Need Group=] linked to the same [=Access Grant=].
* The [=Referenced Access Need=] must link back to the [=Referenced Data Grant=]
    via `interop:hasReferencedDataGrant`.
* [=Referenced Access Need=] and [=Referenced Data Grant=] must have the same `interop:accessModes`
* [=Referenced Access Need=] and [=Referenced Data Grant=] must have the same `interop:registeredShapeTree`

<figure id="fig-grants-referenced-data-grant">
  <figcaption>An [=Referenced Data Grant=] at
  https://alice.pod.example/grants/ab3d0023-3860-4358-ae33-8d3af1097b9d#data-grant-issue
  </figcaption>
  <pre highlight="turtle">
  <#data-grant-issue>
    a interop:ReferencedDataGrant ;
    interop:hasDataGrant <#data-grant-project> ;
    interop:satisfiesAccessNeed <#need-issue> ;
    interop:registeredShapeTree pm:IssueTree ;
    interop:hasDataRegistration data:issue-tree-reg ;
    interop:accessMode acl:read, acl:write, acl:Control ;
    interop:scopeOfGrant interop:AllInstances .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classReferencedDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [ReferencedDataGrant](interop.ttl#ReferencedDataGrant)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>[=Data Grant=] that the [=Referenced Data Grant=] belongs to</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[ReferencedAccessNeed](#classReferencedAccessNeed)</td>
      <td>Links to the [=Referenced Access Need=] satisfied by the
      [=Referenced Data Grant=]</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>[=Data Registration=] for the [=shape tree=] that access
      will be granted to</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>[DataRegistration](#classDataRegistration)</td>
      <td>[=Data Registration=] for registeredShapeTree that the
      [=Referenced Data Grant=] applies to</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Modes of access granted to the target data at hasRegistration</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td> interop:AllInstances, interop:SelectedInstances,
      interop:InheritInstances, interop:NoAccess</td>
      <td>Identifies the access scope of the [=Data Grant=]
        <ul>
          <li>interop:AllInstances - Scope includes
              access to all [=Data Instances=] of the associated
              [=Data Registration=]</li>
          <li>interop:SelectedInstances - Scope includes
              access only to those [=Data Instances=] specifically
              selected by the [=Agent=]</li>
          <li>interop:InheritInstances - Scope includes
              access to [=Data Instances=] inherited by
              instances selected in the parent [=Data Grant=]
          </li>
          <li>interop:NoAccess - No access is granted</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>Instance of registeredShapeTree</td>
      <td>Links to a [=Data Instance=] of registeredShapeTree.</td>
    </tr>
  </tbody>
</table>

The [ReferencedDataGrantShape](#shexReferencedDataGrant) is used to
validate an instance of the [ReferencedDataGrant](#classReferencedDataGrant)
class.

<pre highlight="turtle" id="shexReferencedDataGrant">
<#ReferencedDataGrantShape> {
  a [ interop:ReferencedDataGrant ] ;
  interop:hasDataGrant @<#:DataGrantShape> ;
  interop:satisfiesAccessNeed @<#:AccessNeedShape> ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:scopeOfGrant @<#:DataGrantScopes> ;
  interop:hasDataInstance IRI*
}
</pre>

The [ReferencedDataGrantTree] ensures
that the assigned resource will validate against the
[ReferencedDataGrantShape](#shexReferencedDataGrant).

<pre highlight="turtle" id="treeReferencedDataGrant">
<#ReferencedDataGrantTree>
  a st:ShapeTree ;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops:ReferencedDataGrantShape&gt; .
</pre>

### Remote Data Grant ### {#datamodel-remote-data-grant}

A <dfn>Remote Data Grant</dfn> records an authorization decision made by
an [=Agent=] for an [=Access Grant Subject=] on a
[=Remote Data Registration=], in response to a given [=Access Need=] that
was presented to them. This has the net effect of allowing the
[=Access Grant Subject=] to see data that has been shared by
other [=Agents=].

A [=Remote Data Grant=] may have one or more [=Referenced Remote Data Grants=],
when the [=shape tree=] associated via `interop:registeredShapeTree` has one or
more [=Shape Tree References=].

Each [=Remote Data Grant=] has an assigned scope (`interop:scopeOfGrant`), which
determines how permissions are assigned. The following types are
valid for a [=Remote Data Grant=]:

* <b>`interop:AllRemote`</b>
    * Applies to all
        [=Data Grants=] and [=Referenced Data Grants=] associated with all
        [=Remote Agent Data Registrations=] belonging to the associated
        [=Remote Data Registration=].
    * Permissions will be set for
        the [=Access Grant Subject=] on the [=Remote Data Registration=] container,
        and will be inherited by all member [=Remote Agent Data Registrations=],
        and the [=Data Grants=] and [=Referenced Data Grants=] contained
        by them.
* <b>`interop:AllRemoteFromAgent`</b>
    * Applies to all
        [=Data Grants=] and [=Referenced Data Grants=] belonging to the
        selected [=Remote Agent Data Registrations=] linked via
        `interop:hasRemoteDataFromAgent`.
    * Permissions will be set for
        the [=Access Grant Subject=] on the selected
        [=Remote Agent Data Registration=] containers,
        and will be inherited by all [=Data Grants=] and
        [=Referenced Data Grants=] contained by them.
* <b>`interop:SelectedRemote`</b>
    * Applies only to selected
        [=Data Grants=] and/or [=Referenced Data Grants=] linked
        via `interop:hasDataGrant`, `interop:hasReferencedDataGrant`.
    * Permissions will be set for
        the [=Access Grant Subject=] on the selected
        [=Data Grant=] and/or [=Referenced Data Grant=] resources stored
        in [=Remote Agent Data Registrations=].
* <b>`interop:NoAccess`</b>
    * Indicates that no access is granted to the [=Access Grant Subject=].
    * Applies to the entire [=Remote Data Registration=]
        when there are no [=Remote Agent Data Registrations=] linked via
        `interop:hasRemoteDataFromAgent`, and no
        [=Data Grants=] and/or [=Referenced Data Grants=] linked
        via `interop:hasDataGrant`, `interop:hasReferencedDataGrant`.
    * When there are linked [=Remote Agent Data Registrations=],
        [=Data Grants=], and/or [=Referenced Data Grants=],
        this scope only applies to them.

When recording a [=Remote Data Grant=] via [[SAI-API#grants-recordgrant]]:

* There must be an [=Access Need=] linked via `interop:satisfiesAccessNeed` that
    belongs to an [=Access Need Group=] linked to the same [=Access Grant=].
* The [=Access Need=] must link back to the [=Remote Data Grant=]
    via `interop:hasRemoteDataGrant`.
* [=Access Need=] and [=Remote Data Grant=] must have the same `interop:accessModes`
* [=Access Need=] and [=Remote Data Grant=] must have the same `interop:registeredShapeTree`

<table class="classinfo data" align="left" id="classRemoteDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteDataGrant](interop.ttl#RemoteDataGrant)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasAccessGrant</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[=Access Grant=] that the [=Remote Data Grant=] belongs to</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Access Need=] satisfied by the [=Remote Data Grant=]</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>The [=shape tree=] associated with the [=Remote Data Grant=]</td>
    </tr>
    <tr>
      <td>hasRemoteDataRegistration</td>
      <td>[RemoteDataRegistration](#classRemoteDataRegistration)</td>
      <td>[=Remote Data Registration=] for `registeredShapeTree`</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Mode of access for the grant</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td>interop:AllRemote, interop:AllRemoteFromAgent,
      interop:SelectedRemote, interop:NoAccess</td>
      <td>Identifies the access scope of the [=Remote Data Grant=]
        <ul>
          <li>interop:AllRemote - All remote data for a given
          [=Remote Data Registration=]</li>
          <li>interop:AllRemoteFromAgent - All remote data from a given
          [=Agent=] for a given [=Remote Data Registration=]</li>
          <li>interop:SelectedRemote - Only selected access</li>
          <li>interop:NoAccess - No access</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>hasRemoteDataFromAgent</td>
      <td>[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration)</td>
      <td>Link to a [=Remote Agent Data Registration=] when
        scope is `AllRemoteFromAgent`</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Link to a [=Data Grant=] resource that was extracted from an
        [=Access Receipt=] and stored under the relevant
        [=Remote Agent Data Registration=] when the
        scope is `SelectedRemote`</td>
    </tr>
    <tr>
      <td>hasReferencedDataGrant</td>
      <td>[ReferencedDataGrant](#classReferencedDataGrant)</td>
      <td>Link to a [=Referenced Data Grant=] resource that was extracted from an
        [=Access Receipt=] and stored under the relevant
        [=Remote Agent Data Registration=] when the
        scope is `SelectedRemote`</td>
    </tr>
    <tr>
      <td>hasReferencedRemoteDataGrant</td>
      <td>[ReferencedRemoteDataGrant](#classReferencedRemoteDataGrant)</td>
      <td>Link to a [=Referenced Remote Data Grant=] when
      `registeredShapeTree` has references to other [=shape trees=] that
      should be included in authorization</td>
    </tr>
  </tbody>
</table>

The [RemoteDataGrantShape](#shexRemoteDataGrant) is used to validate an
instance of the [RemoteDataGrant](#classRemoteDataGrant) class.

<pre highlight="turtle" id="shexRemoteDataGrant">
<#RemoteDataGrantShape> {
  a [ interop:RemoteDataGrant ] ;
  interop:hasAccessGrant @<#:AccessGrantShape> ;
  interop:satisfiesAccessNeed @<#:AccessNeedShape>+ ;
  interop:registeredShapeTree IRI ;
  interop:hasRemoteDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:scopeOfGrant @<#:RemoteDataGrantScopes>+ ;
  interop:hasRemoteDataFromAgent IRI* ;
  interop:hasDataGrant IRI* ;
  interop:hasReferencedDataGrant IRI* ;
  interop:hasReferencedRemoteDataGrant @<#:ReferencedRemoteDataGrantShape>
}
</pre>

### Referenced Remote Data Grant ### {#datamodel-referenced-remote-data-grant}

A <dfn>Referenced Remote Data Grant</dfn> is linked from a [=Remote Data Grant=],
and records an authorization decision made by an [=Agent=] for an
[=Access Grant Subject=] on a [=Remote Data Registration=],
based on a [=Referenced Access Need=] that was presented to them. It stipulates
that the [=shape tree=] of the [=Referenced Remote Data Grant=] is effectively
a "child" of the [=shape tree=] associated with the parent [=Remote Data Grant=]
that references it.

Like [=Remote Data Grants=], each [=Referenced Remote Data Grant=] has an assigned
scope (`interop:scopeOfGrant`), which determines how permissions are assigned.
The following types are
valid for a [=Referenced Remote Data Grant=]:

* <b>`interop:AllRemote`</b>
    * Applies to all
        [=Data Grants=] and [=Referenced Data Grants=] associated with all
        [=Remote Agent Data Registrations=] belonging to the associated
        [=Remote Data Registration=].
    * Permissions will be set for
        the [=Access Grant Subject=] on the [=Remote Data Registration=] container,
        and will be inherited by all member [=Remote Agent Data Registrations=],
        and the [=Data Grants=] and [=Referenced Data Grants=] contained
        by them.
* <b>`interop:AllRemoteFromAgent`</b>
    * Applies to all
        [=Data Grants=] and [=Referenced Data Grants=] belonging to the
        selected [=Remote Agent Data Registrations=] linked via
        `interop:hasRemoteDataFromAgent`.
    * Permissions will be set for
        the [=Access Grant Subject=] on the selected
        [=Remote Agent Data Registration=] containers,
        and will be inherited by all [=Data Grants=] and
        [=Referenced Data Grants=] contained by them.
* <b>`interop:SelectedRemote`</b>
    * Applies only to selected
        [=Data Grants=] and/or [=Referenced Data Grants=] linked
        via `interop:hasDataGrant`, `interop:hasReferencedDataGrant`.
    * Permissions will be set for
        the [=Access Grant Subject=] on the selected
        [=Data Grant=] and/or [=Referenced Data Grant=] resources stored
        in [=Remote Agent Data Registrations=].
* <b>`interop:NoAccess`</b>
    * Indicates that no access is granted to the [=Access Grant Subject=].
    * Applies to the entire [=Remote Data Registration=]
        when there are no [=Remote Agent Data Registrations=] linked via
        `interop:hasRemoteDataFromAgent`, and no
        [=Data Grants=] and/or [=Referenced Data Grants=] linked
        via `interop:hasDataGrant`, `interop:hasReferencedDataGrant`.
    * When there are linked [=Remote Agent Data Registrations=],
        [=Data Grants=], and/or [=Referenced Data Grants=],
        this scope only applies to them.

When recording a [=Referenced Remote Data Grant=] via [[SAI-API#grants-recordgrant]]:

* There must be a [=Referenced Access Need=] linked via
    `interop:satisfiesAccessNeed` that
    belongs to an [=Access Need Group=] linked to the same [=Access Grant=].
* The [=Referenced Access Need=] must link back to the [=Referenced Remote Data Grant=]
    via `interop:hasReferencedRemoteDataGrant`.
* [=Referenced Access Need=] and [=Referenced Remote Data Grant=] must have the same
    `interop:accessModes`
* [=Referenced Access Need=] and [=Referenced Remote Data Grant=] must have the same
    `interop:registeredShapeTree`

<table class="classinfo data" align="left" id="classReferencedRemoteDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [ReferencedRemoteDataGrant](interop.ttl#ReferencedRemoteDataGrant)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRemoteDataGrant</td>
      <td>[RemoteDataGrant](#classRemoteDataGrant)</td>
      <td>[=Remote Data Grant=] that the [=Referenced Remote Data Grant=] belongs to</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Referenced Access Need=] satisfied by the
      [=Referenced Remote Data Grant=]</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>The [=shape tree=] associated with the [=Referenced Remote Data Grant=]</td>
    </tr>
    <tr>
      <td>hasRemoteDataRegistration</td>
      <td>[RemoteDataRegistration](#classRemoteDataRegistration)</td>
      <td>[=Remote Data Registration=] for `registeredShapeTree`</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Mode of access for the grant</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td>interop:AllRemote, AllRemoteFromAgent,
      interop:SelectedRemote, interop:NoAccess</td>
      <td>Identifies the access scope of the [=Remote Data Grant=]
        <ul>
          <li>interop:AllRemote - All remote data for a given
          [=Remote Data Registration=]</li>
          <li>interop:AllRemoteFromAgent - All remote data from a given
          [=Agent=] for a given [=Remote Data Registration=]</li>
          <li>interop:SelectedRemote - Only selected access</li>
          <li>interop:NoAccess - No access</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>hasRemoteDataFromAgent</td>
      <td>[RemoteAgentDataRegistration](#classRemoteAgentDataRegistration)</td>
      <td>Link to a [=Remote Agent Data Registration=] when
        scope is `AllRemoteFromAgent`</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Link to a [=Data Grant=] resource that was extracted from an
        [=Access Receipt=] and stored under the relevant
        [=Remote Agent Data Registration=] when the
        scope is `SelectedRemote`</td>
    </tr>
    <tr>
      <td>hasReferencedDataGrant</td>
      <td>[ReferencedDataGrant](#classReferencedDataGrant)</td>
      <td>Link to a [=Referenced Data Grant=] resource that was extracted from an
        [=Access Receipt=] and stored under the relevant
        [=Remote Agent Data Registration=] when the
        scope is `SelectedRemote`</td>
    </tr>
  </tbody>
</table>

The [ReferencedRemoteDataGrantShape](#shexReferencedRemoteDataGrant) is used
to validate an instance of the
[ReferencedRemoteDataGrant](#classRemoteDataGrant) class.

<pre highlight="turtle" id="shexReferencedRemoteDataGrant">
<#ReferencedRemoteDataGrantShape> {
  a [ interop:ReferencedRemoteDataGrant ] ;
  interop:hasRemoteDataGrant @<#:RemoteDataGrantShape> ;
  interop:satisfiesAccessNeed @<#:AccessNeedShape>+ ;
  interop:registeredShapeTree IRI ;
  interop:hasRemoteDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:scopeOfGrant @<#:RemoteDataGrantScopes>+ ;
  interop:hasRemoteDataFromAgent IRI* ;
  interop:hasDataGrant IRI* ;
  interop:hasReferencedDataGrant IRI*
}
</pre>

### Trusted Grant ### {#datamodel-trusted-grant}

A <dfn>Trusted Grant</dfn> records a decision made by a
given [=Agent=] to trust another with elevated access to [=Registries=],
[=Registry Sets=], or the [=Identity=]
of the [=Agent=] themselves, based on a [=Trusted Need=] that was
presented to them.

A <dfn>Trusted Agent</dfn> is an [=Agent=] that been granted elevated
access through a [=Trusted Grant=].

Each [=Trusted Grant=] represents accessed assigned to a trusted
resource identified by `interop:trustedWith`, of a given type, indicated by
`interop:trustedWithType`.

Each [=Trusted Grant=] has an assigned scope (`interop:scopeOfGrant`), which
determines how permissions are assigned. The following types are
valid for a [=Trusted Grant=]:

* <b>`interop:TrustedAccess`</b> - Applies to trusted resource linked
    via `interop:trustedWith`. Permissions will
    be set for the [=Access Grant Subject=] on the trusted resource. If
    `trustedWithType` is a type of [=Registry Set=], the permissions
    will be applied to the [=Registry Set=] resource, as well as all of
    the [=Registries=] linked from that [=Registry Set=].
* <b>`interop:NoAccess`</b> - Indicates that no access is granted
    to `trustedWith`. If `trustedWith` is a [=Registry Set=],
    it indicates that no access is granted to the [=Registry Set=] resource,
    nor to the [=Registries=] linked from that [=Registry Set=].

<table class="classinfo data" align="left" id="classTrustedGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [TrustedGrant](interop.ttl#TrustedGrant)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasAccessGrant</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[=Access Grant=] that the [=Trusted Grant=] belongs to</td>
    </tr>
    <tr>
      <td>satisfiesTrustedNeed</td>
      <td>[TrustedNeed](#classTrustedNeed)</td>
      <td>Links to the [=Trusted Need=] satisfied by the [=Trusted Grant=]</td>
    </tr>
    <tr>
      <td>trustedWith</td>
      <td>[=Agent=], [=Registry Set=], [=Registry=]</td>
      <td>Identifies the primary trusted resource of the [=Trusted Grant=]
        <ul>
          <li>[=Agent=] - Access to the profile document of the [=Agent=]</li>
          <li>[=Registry Set=] - Access to the specified [=Registry Set=],
          as well as all [=Registries=] linked to it</li>
          <li>[=Registry=] - Access to the specified [=Registry=],
          as well as all [=Registrations=] linked to it</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>trustedWithType</td>
      <td><ul>
        <li>`interop:Agent`</li>
        <li>`interop:ApplicationRegistrySet`</li>
        <li>`interop:DataRegistrySet`</li>
        <li>`interop:AccessGrantRegistrySet`</li>
        <li>`interop:AccessReceiptRegistrySet`</li>
        <li>`interop:RemoteDataRegistrySet`</li>
        <li>`interop:ApplicationRegistry`</li>
        <li>`interop:DataRegistry`</li>
        <li>`interop:AccessGrantRegistry`</li>
        <li>`interop:AccessReceiptRegistry`</li>
        <li>`interop:RemoteDataRegistry`</li>
      </ul></td>
      <td>Specific type of instance linked via `trustedWith`</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Mode of access being granted to the instance linked via `trustedWith`</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td>interop:NoAccess, interop:TrustedAccess</td>
      <td>Current scope of trusted access</td>
    </tr>
  </tbody>
</table>

The [TrustedGrantShape](#shexTrustedGrant) is used to
validate an instance of the [TrustedGrant](#classTrustedGrant)
class.

<pre highlight="turtle" id="shexTrustedGrant">
<#TrustedGrantShape> {
  a [ interop:TrustedGrant ] ;
  interop:hasAccessGrant @<#:AccessGrantShape> ;
  interop:satisfiesTrustedNeed @<#:TrustedNeedShape>+ ;
  interop:trustedWith IRI ;
  interop:trustedWithType @<#:TrustedWithTypes> ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:scopeOfGrant @<#:TrustedGrantScopes>+
}
</pre>

### Access Invitation ### {#datamodel-access-invitation}

An <dfn>Access Invitation</dfn> is a subclass of [=Access Grant=] used when
an [=Agent=] wishes to grant access to another [=Agent=] whose
decentralized [=identity=] is unknown to them, or may not exist yet, so they
must be first invited through another channel (such as phone or email).

Like an [=Access Grant=], an [=Access Invitation=] links to access
criteria detailed in one or more [=Access Need Groups=], with
associated [=Data Grants=] or [=Trusted Grants=] indicating the
intended access to be granted.

However, instead of linking to an [=Access Grant Subject=], an
[=Access Invitation=] links to one or more [=Access Invitation Channels=].

Each channel represents a mechanism through which the invitation can
be delivered and validated. The mechanism is designed so that multiple
channels may be validated before an invitation is confirmed and
converted to an [=Access Grant=].

<figure id="fig-grants-invitation">
  <figcaption>An [=Access Invitation=] at
  https://alice.pod.example/grants/08c5ae76-6c83-46f8-8e1d-eb14219e7f5f#invitation
  </figcaption>
  <pre highlight="turtle">
  <#invitation>
    a interop:AccessInvitation ;
    interop:registeredBy https://alice.pod.example/profile/id#me ;
    interop:registeredWith https://trusted.example/id#agent ;
    interop:registeredAt "2020-09-13T19:32:52Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-13T19:32:52Z"^^xsd:dateTime ;
    interop:expiresAt "2020-09-20T19:32:52Z"^^xsd:dateTime ;
    interop:hasAccessNeedGroup &lt;#need-group-pm&gt; ;
    interop:hasDataGrant &lt;#data-grant-project&gt; ;
    interop:hasAccessInvitationChannel
      &lt;#phone-channel&gt; ,
      &lt;#email-channel&gt; .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classAccessInvitation">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [AccessInvitation](interop.ttl#AccessInvitation)
        a rdfs:subClassOf [AccessGrant](#classAccessGrant)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[Agent](#classAgent)</td>
      <td>[=Agent=] that registered the [=Access Invitation=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to create the [=Access Invitation=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Invitation=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Invitation=] was updated</td>
    </tr>
    <tr>
      <td>expiresAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Invitation=] expires</td>
    </tr>
    <tr>
      <td>hasAccessInvitationChannel</td>
      <td>[AccessInvitationChannel](#classAccessInvitationChannel)</td>
      <td>Links to an [=Access Invitation Channel=]</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>Links to an [=Access Need Group=] associated with
      the [=Access Invitation=].</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to a [=Data Grant=] associated with the
      [=Access Invitation=].</td>
    </tr>
    <tr>
      <td>hasTrustedGrant</td>
      <td>[TrustedGrant](#classTrustedGrant)</td>
      <td>Links to a [=Trusted Grant=] associated with the
      [=Access Invitation=].</td>
    </tr>
    <tr>
      <td>hasRemoteDataGrant</td>
      <td>[RemoteDataGrant](#classRemoteDataGrant)</td>
      <td>Links to a [=Remote Data Grant=] associated with the [=Access Invitation=].</td>
    </tr>
  </tbody>
</table>

The [AccessInvitationShape](#shexAccessInvitation) is used to validate an
instance of the [AccessInvitation](#classAccessInvitation) class.

<pre highlight="turtle" id="shexAccessInvitation">
<#AccessInvitationShape> {
  a [ interop:AccessInvitation ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:expiresAt xsd:dateTime? ;
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+ ;
  ( interop:hasDataGrant @<#:DataGrantShape>+ |
  interop:hasTrustedGrant @<#:TrustedGrantShape>+ |
  interop:hasRemoteDataGrant @<#:RemoteDataGrantShape>+ ) ;
  interop:hasAccessInvitationChannel @<#:AccessInvitationChannelShape>+
}
</pre>

The [AccessInvitationTree](interop.tree#AccessInvitationTree) is assigned
to a resource via the [AccessGrantRegistryTree](#treeAccessGrantRegistry), and ensures
that the assigned resource will validate against the
[AccessInvitationShape](#shexAccessInvitation).

<pre highlight="turtle" id="treeAccessInvitation">
<#AccessInvitationTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#AccessInvitationShape&gt; .
</pre>

### Access Invitation Channel ### {#datamodel-access-invitation-channel}

An <dfn>Access Invitation Channel</dfn> represents a mechanism through
which an [=Access Invitation=] can be delivered and validated.

<figure id="fig-grants-invitation-channel">
  <figcaption>Example [=Access Invitation Channels=]</figcaption>
  <pre highlight="turtle">
  <#phone-channel>
    a interop:PhoneInvitationChannel ;
    interop:channelTarget "(555) 555-1212" ;
    interop:channelCode "654345" ;
    interop:isValidated false ;
    interop:remainingAttempts 3 .

  <#email-channel>
    a interop:EmailInvitationChannel ;
    interop:channelTarget "bob@example.com" ;
    interop:channelCode "434567" ;
    interop:isValidated true ;
    interop:remainingAttempts 3 .
  </pre>
</figure>

<table class="classinfo data" align="left" id="classAccessInvitationChannel">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [AccessInvitationChannel](interop.ttl#AccessInvitationChannel)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>rdf:type</td>
      <td>interop:PhoneInvitationChannel,
      interop:EmailInvitationChannel,
      interop:SMSInvitationChannel,
      interop:OfflineInvitationChannel,
      interop:LDNInvitationChannel</td>
      <td>Each channel is represented by a subClassOf
      AccessInvitationChannel</td>
    </tr>
    <tr>
      <td>channelTarget</td>
      <td>xsd:string</td>
      <td>Target used when validating the channel</td>
    </tr>
    <tr>
      <td>channelCode</td>
      <td>xsd:string</td>
      <td>Code used for channel validation</td>
    </tr>
    <tr>
      <td>isValidated</td>
      <td>xsd:boolean</td>
      <td>Indicates whether the channel has been validated</td>
    </tr>
    <tr>
      <td>remainingAttempts</td>
      <td>xsd:integer</td>
      <td>Number of allowed validation attempts remaining</td>
    </tr>
  </tbody>
</table>

The [AccessInvitationChannelShape](#shexAccessInvitationChannel) is used to
validate an instance of the
[AccessInvitationChannel](#classAccessInvitation) class.

<pre highlight="turtle" id="shexAccessInvitationChannel">
<#AccessInvitationChannelShape> {
   a @<#ChannelTypes> ;
   interop:channelTarget xsd:string ;
   interop:channelCode xsd:string ;
   interop:isValidated xsd:boolean ;
   interop:remainingAttempts xsd:integer
}

<#ChannelTypes> [
  :PhoneInvitationChannel   # Telephone
  :EmailInvitationChannel   # E-mail
  :SMSInvitationChannel     # SMS (Simple Messaging Service)
  :OfflineInvitationChannel # Other communication, e.g. verbal, shared note
  :LDNInvitationChannel     # Linked Data Notification
]
</pre>

## Resource Hierarchy ## {#grants-hierarchy}

<table class="data tree" align="left">
  <col>
  <col>
  <col>
  <col>
  <thead>
    <tr>
      <th>Resource</th>
      <th>Class</th>
      <th>Shape</th>
      <th>Shape Tree</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`/profile/`</td>
      <td>-</td>
      <td>-</td>
      <td>[ProfileTree](#treeAgent)</td>
    </tr>
    <tr>
      <td>`-- grant#set`</td>
      <td>[AccessGrantRegistrySet](#classAccessGrantRegistrySet)</td>
      <td>[AccessGrantRegistrySetShape](#shexAccessGrantRegistrySet)</td>
      <td>[AccessGrantRegistrySetTree](#treeAccessGrantRegistrySet)</td>
    </tr>
    <tr>
      <td>`/grants/#registry`</td>
      <td>[AccessGrantRegistry](#classAccessGrantRegistry)</td>
      <td>[AccessGrantRegistryShape](#shexAccessGrantRegistry)</td>
      <td>[AccessGrantRegistryTree](#treeAccessGrantRegistry)</td>
    </tr>
    <tr>
      <td>`-- c482f931...630e5ab0#grant`</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[AccessGrantShape](#shexAccessGrant)</td>
      <td>[AccessGrantTree](#treeAccessGrant)</td>
    </tr>
    <tr>
      <td>`-- e0983a7e...88c387ea#grant`</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[AccessGrantShape](#shexAccessGrant)</td>
      <td>[AccessGrantTree](#treeAccessGrant)</td>
    </tr>
    <tr>
      <td>`-- eddf13d6...7f4962c5#grant`</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[AccessGrantShape](#shexAccessGrant)</td>
      <td>[AccessGrantTree](#treeAccessGrant)</td>
    </tr>
    <tr>
      <td>`-- a990c1b9...c041eb74#grant`</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[AccessGrantShape](#shexAccessGrant)</td>
      <td>[AccessGrantTree](#treeAccessGrant)</td>
    </tr>
    <tr>
      <td>`-- 265ef957...6689aee7#grant`</td>
      <td>[AccessGrant](#classAccessGrant)</td>
      <td>[AccessGrantShape](#shexAccessGrant)</td>
      <td>[AccessGrantTree](#treeAccessGrant)</td>
    </tr>
  </tbody>
</table>

The [=Access Grant Registry Set=] and the [=Access Grant Registry=] MAY or MAY NOT
be on the same [=pod=].

[=Access Grant Registry Set=] and [=Access Grant Registry=] resources MAY use any
resource or subject names.

[=Access Grants=] MUST use \[UUIDs](https://www.ietf.org/rfc/rfc4122.txt)
for resource names.
