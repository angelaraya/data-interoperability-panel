PREFIX interop: <http://www.w3.org/ns/solid/interop#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Agent
<#SocialAgentShape> {
  a [ interop:SocialAgent ] ;
  interop:hasRegistrySet IRI ;
  interop:hasAuthorizationAgent IRI ;
  interop:hasInbox IRI ;
  interop:hasAccessInbox IRI
}

# Registry Set
<#RegistrySetShape> {
  a [ interop:RegistrySet ] ;
  interop:hasAgentRegistry IRI ;
  interop:hasAccessConsentRegistry IRI ;
  interop:hasDataRegistry IRI*
}

# Agent Registry
<#AgentRegistryShape> {
  a [ interop:AgentRegistry ] ;
  interop:hasRegistration IRI*
}

# Social Agent Registration
<#SocialAgentRegistrationShape> {
  a [ interop:SocialAgentRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:registeredAgent IRI ;
  interop:hasAccessGrant IRI ;
  interop:reciprocalRegistration IRI?
}

# Application Registration
<#ApplicationRegistrationShape> {
  a [ interop:ApplicationRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:registeredAgent IRI ;
  interop:hasAccessGrant IRI ;
}

# Data Registry
<#DataRegistryShape> {
  a [ interop:DataRegistry ] ;
  interop:hasRegistration IRI*
}

# Data Registration
<#DataRegistrationShape> {
  a [ interop:DataRegistration ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:registeredShapeTree IRI ;
  interop:registeredType IRI*
}

# Application
<#ApplicationShape> {
  a [ interop:Application ] ;
  interop:applicationName xsd:string ;
  interop:applicationDescription xsd:string ;
  interop:applicationAuthor IRI ;
  interop:applicationThumbnail IRI? ;
  interop:hasAccessNeedGroup IRI*
}

# Access Need Group
<#AccessNeedGroupShape> {
  a [ interop:AccessNeedGroup ] ;
  interop:hasAccessDecoratorSet IRI*
  interop:accessNecessity [ interop:AccessRequired interop:AccessOptional ] ;
  interop:accessScenario [ interop:PersonalAccess interop:SharedAccess ]+ ;
  interop:authenticatesAs [ interop:SocialAgent interop:Application ] ;
  interop:hasAccessNeed IRI+
}

# Access Need
<#AccessNeedShape> {
  a [ interop:AccessNeed ] ;
  interop:registeredShapeTree IRI ;
  interop:hasDataInstance IRI* ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:accessNecessity [ interop:AccessRequired interop:AccessOptional ] ;
  interop:hasDataGrant @<#:DataGrantShape>?
  interop:inheritsFromNeed IRI ;
}

# Access Modes
<#AccessModes> [
  acl:Read
  acl:Write
  acl:Append
  acl:Control
  acl:Create
  acl:Update
  acl:Delete
]

# Access Decorator Set
<#AccessDecoratorSet> {
  a [ interop:AccessDecoratorSet ] ;
  interop:usesLanguage xsd:language
}

# Access Need Group Decorator
<#AccessNeedGroupDecoratorShape> {
  a [ interop:AccessNeedGroupDecorator ] ;
  interop:hasAccessNeedGroup IRI ;
  skos:prefLabel xsd:string ;
  skos:definition xsd:string
}

# Access Need Decorator
<#AccessNeedDecoratorShape> {
  a [ interop:AccessNeedDecorator ] ;
  interop:hasAccessNeedGroup IRI ;
  skos:prefLabel xsd:string
}

# Access Request
<#AccessRequestShape> {
  a [interop:AccessRequest] ;
  interop:fromAgent IRI ;             # Agent who sent the receipt
  interop:toAgent IRI ;               # Recipient of the receipt
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+
}

# Access Consent Registry
<#AccessConsentRegistryShape> {
  a [ interop:AccessConsentRegistry ] ;
  interop:hasRegistration IRI*
}

# Access Consent
<#AccessConsentShape> {
  a [ interop:AccessConsent ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:registeredAgent IRI ;
  interop:hasAccessNeedGroup IRI? ;
  interop:hasDataConsent IRI+
}

<#DataConsentShape> {
  a [ interop:DataConsent ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:satisfiesAccessNeed IRI? ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfConsent @<#:DataGrantScopes> ;
  interop:satisfiesAccessNeed IRI? ;
  ( interop:hasDataInstance IRI* |
    interop:hasDataResource IRI* ) ;
  interop:inheritsFromConsent IRI?
}

<#DataConsentAllShape> {
  a [ interop:DataConsent ] ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:satisfiesAccessNeed IRI? ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfConsent [ interop:All ] ;
  interop:satisfiesAccessNeed IRI? .
}

<#DataConsentAllFromAgentShape> {
  a [ interop:DataConsent ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:satisfiesAccessNeed IRI? ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfConsent [ interop:AllFromAgent ] ;
  interop:satisfiesAccessNeed IRI? .
}

<#DataConsentAllFromRegistryShape> {
  a [ interop:DataConsent ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:satisfiesAccessNeed IRI? ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfConsent [ interop:AllFromRegistry ] ;
  interop:hasDataRegistration IRI ;
  interop:satisfiesAccessNeed IRI? .
}

<#DataConsentSelectedFromRegistryShape> {
  a [ interop:DataConsent ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfConsent [ interop:SelectedFromRegistry ] ;
  interop:hasDataRegistration IRI ;
  interop:hasDataInstance IRI+ ;
  interop:satisfiesAccessNeed IRI? .
}
<#DataConsentInheritedShape> {
  a [ interop:DataConsent ] ;
  interop:dataOwner IRI? ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:satisfiesAccessNeed IRI? ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfConsent [ interop:Inherited ] ;
  interop:hasDataRegistration IRI? ;
  interop:inheritsFromConsent IRI ;
  interop:satisfiesAccessNeed IRI? .
}

# Access Invitation
<#AccessInvitationShape> {
  a [ interop:AccessInvitation ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:updatedAt xsd:dateTime ;
  interop:expiresAt xsd:dateTime? ;
  interop:hasAccessNeedGroup @<#:AccessNeedGroupShape>+ ;
  interop:hasDataGrant @<#:DataGrantShape>+ ;
  interop:hasAccessInvitationChannel @<#:AccessInvitationChannelShape>+
}

# Access Invitation Channel
<#AccessInvitationChannelShape> {
   a @<#ChannelTypes> ;
   interop:channelTarget xsd:string ;
   interop:channelCode xsd:string ;
   interop:isValidated xsd:boolean ;
   interop:remainingAttempts xsd:integer
}

# Access Invitation Channel Types
<#ChannelTypes> [
  :PhoneInvitationChannel   # Telephone
  :EmailInvitationChannel   # E-mail
  :SMSInvitationChannel     # SMS (Simple Messaging Service)
  :OfflineInvitationChannel # Other communication, e.g. verbal, shared note
  :LDNInvitationChannel     # Linked Data Notification
]

# Access Grant
<#AccessGrantShape> {
  a [ interop:AccessGrant ] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI? ;
  interop:registeredAt xsd:dateTime ;
  interop:registeredAgent IRI ;
  interop:hasAccessNeedGroup IRI ;
  interop:hasDataGrant IRI+
}

# Data Grant
<#DataGrantShape> {
  a [ interop:DataGrant ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  ( interop:hasDataRegistration IRI |
    interop:hasDataResource IRI ) ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfGrant @<#:DataGrantScopes> ;
  interop:satisfiesAccessNeed IRI? ;
  interop:hasDataInstance IRI* ;
}

<#DataGrantAllFromRegistryShape> {
  a [ interop:DataGrant ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfGrant [ interop:AllFromRegistry ] ;
  interop:satisfiesAccessNeed IRI? .
}

<#DataGrantSelectedFromRegistryShape> {
  a [ interop:DataGrant ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfGrant [ interop:SelectedFromRegistry ] ;
  interop:hasDataInstance IRI+ ;
  interop:satisfiesAccessNeed IRI? .
}

<#DataGrantInheritedShape> {
  a [ interop:DataGrant ] ;
  interop:dataOwner IRI ;
  interop:registeredAgent IRI ;
  interop:registeredShapeTree IRI ;
  interop:hasDataRegistration IRI ;
  interop:accessMode @<#:AccessModes>+ ;
  interop:creatorAccessMode @<#:AccessModes>* ;
  interop:scopeOfGrant [ interop:Inherited ] ;
  interop:inheritsFromGrant IRI ;
  interop:satisfiesAccessNeed IRI? .
}

# Data Grant Scopes
<#DataGrantScopes> [
  interop:SelectedFromRegistry
  interop:AllFromRegistry
  interop:AllFromAgent
  interop:All
  interop:Inherited
  interop:NoAccess
]

# Access Receipt
<#AccessReceiptShape> {
  a [interop:AccessReceipt] ;
  interop:providedAt xsd:dateTime ;
  interop:fromSocialAgent IRI ;
  interop:viaSocialAgent IRI ;
  interop:hasSocialAgentRegistration IRI
}
