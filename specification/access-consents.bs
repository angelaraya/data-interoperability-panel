Access Consents {#consents}
=====================

[=Access Consents=] record a [=Social Agent's=] decision to grant access to
some portion of the data in their control to another [=Social Agent=] or 
[=Application=]. [=Access Consents=] are not shared with a grantee.

[=Access Grants=] are generated from [=Access Consents=]. They are shared
with a given [=Agent=] to communicate the scope of access that has been
granted to them.

## Access Consent ## {#access-consent}

An <dfn>Access Consent</dfn> records the decision of a [=Social Agent=]
to grant access to some portion of data in their control to 
another [=Agent=]. 

[=Access Consents=] should not be shared with the [=Agent=] that
has been granted access. [=Access Grants=] are generated from 
[=Access Consents=], and are appropriate to share with the grantee.

[=Access Consents=] are recorded in a [=Social Agent's=] [=Access Consent Registry=].

[=Access Consents=] are immutable. If an [=Access Consent=] for an
[=Agent=] needs to change, it should be replaced.


[Class Definition](interop.ttl#AccessConsent) -
[Shape Definition](interop.shex#AccessConsentShape) -
[Shape Tree Definition](interop.tree#AccessConsentTree)

<table class="classinfo data" align="left" id="classAccessConsent">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that recorded the [=Access Consent=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to record the [=Access Consent=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Consent=] was created</td>
    </tr>
    <tr>
      <td>registeredAgent</td>
      <td>[Agent](#classAgent)</td>
      <td>The [=Social Agent=] or [=Application=] that has received
      consent</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>An [=Access Need Group=] used to communicate the 
      [=Access Needs=] that the [=Access Consent=] is
      satisfying</td>
    </tr>
    <tr>
      <td>hasDataConsent</td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>Consent for a specific type of data</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Access Consent=] for Projectron at  
    https://alice.example/consents/e2765d6c -
    <a href="snippets/alice.example/e2765d6c.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/e2765d6c.ttl
  highlight: turtle
  show: 10-25
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Access Consent=] for Bob at  
    https://alice.example/consents/4460dce3 -
    <a href="snippets/alice.example/4460dce3.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/4460dce3.ttl
  highlight: turtle
  show: 12-25
  </pre>
</figure>

## Data Consent ## {#data-consent}

A <dfn>Data Consent</dfn> records the decision of a [=Social Agent=]
to grant access to a specific type of data in their control, identified
by a [=Shape Tree=]. They are always associated with a single
[=Access Consent=].

[=Data Consents=] should not be shared with the [=Agent=] that has 
been granted access. [=Data Grants=] are generated from [=Data Consents=],
and are appropriate to share with the grantee.

[=Data Consents=] are immutable. If a [=Data Consent=]
needs to change, it should be replaced.

[Class Definition](interop.ttl#DataConsent) -
[Shape Definition](interop.shex#DataConsentShape) -
[Shape Tree Definition](interop.tree#DataConsentTree)

<table class="classinfo data" align="left" id="classDataConsent">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dataOwner</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that owns the data being consented</td>
    </tr>
    <tr>
      <td>registeredAgent</td>
      <td>[Agent](#classAgent)</td>
      <td>The [=Social Agent=] or [=Application=] that has received
      consent</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td><a href="https://www.w3.org/ns/shapetrees#ShapeTree" class="vocab">st:ShapeTree</a></td>
      <td>[=Shape Tree=] representing the type of data being consented</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Modes of access granted to the consented data</td>
    </tr>
    <tr>
      <td>creatorAccessMode</td>
      <td>`acl:Read, acl:Write, acl:Control, acl:Append`</td>
      <td>Additional access mode assigned to the creator of a
        data instance. Adds to the set of modes linked via 
        `interop:accessMode`. Only valid when `accessMode` includes
         `acl:Write` or `acl:Append`</td>
    </tr>
    <tr>
      <td>scopeOfConsent</td>
      <td>interop:All, interop:AllFromAgent, interop:AllFromRegistry, 
      interop:SelectedFromRegistry, interop:Inherited</td>
      <td>Identifies the [=access scope=] of the [=Data Consent=]</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>A [=Data Registration=] for `registeredShapeTree`</td>
      <td>Links to a [=Data Registration=] of registeredShapeTree in a 
      [=Data Registry=] that is a subject of the current
      [=Data Consent=].</td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>[=Data instance=] of `registeredShapeTree`</td>
      <td>Links to a [=Data Instance=] of registeredShapeTree in a 
      [=Data Registry=].</td>
    </tr>
    <tr>
      <td>hasDataResource</td>
      <td>Data resource of `registeredShapeTree`</td>
      <td>Links to a resource of registeredShapeTree.</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Access Need=] satisfied by the [=Data Consent=]</td>
    </tr>
    <tr>
      <td>inheritsFromConsent</td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>Links to a parent [=Data Consent=] whose registeredShapeTree
      references the shape tree associated with the current
      [=Data Consent=].</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Data Consent=] for Projectron to access Projects
    at https://alice.example/consents/54a1b6a0 -
    <a href="snippets/alice.example/54a1b6a0.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/54a1b6a0.ttl
  highlight: turtle
  show: 12-20
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Consent=] for Projectron to access Tasks
    at https://alice.example/consents/0e4cb692 -
    <a href="snippets/alice.example/0e4cb692.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0e4cb692.ttl
  highlight: turtle
  show: 12-22
  </pre>
</figure>

## Access Grant ## {#access-grant}

An <dfn>Access Grant</dfn> provides an [=Agent=] with a detailed 
description of access that has been granted to them. [=Access Grants=]
are generated from [=Access Consents=], and are stored in the 
[=Agent Registry=] of the [=Data Owner=].

Each [=Access Grant=] has one or more [=Data Grants=], each of which
represents access granted to a specific type of data.

[=Access Grants=] are immutable. If an [=Access Grant=]
needs to change, it must be replaced.

[Class Definition](interop.ttl#AccessGrant) -
[Shape Definition](interop.shex#AccessGrantShape) -
[Shape Tree Definition](interop.tree#AccessGrantTree)

<table class="classinfo data" align="left" id="classAccessGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that registered the [=Access Grant=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Grant=] was created</td>
    </tr>
    <tr>
      <td>registeredAgent</td>
      <td>[Agent](#classAgent)</td>
      <td>Links to the [=Social Agent=] or [=Application=] that was granted access.</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>Links to an [=Access Need Group=] associated with the Access Grant.</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to a [=Data Grant=] associated with the Access Grant.</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Access Grant=] to Projectron, stored in the
  [=Agent Registration=] for Projectron in her [=Agent Registry=] at
  https://alice.pod.example/agents/2f2f3628/27eae14b -
  <a href="snippets/alice.example/27eae14b.ttl">View</a> 
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/27eae14b.ttl
  highlight: turtle
  show: 10-21
  </pre>
</figure>

## Data Grant ## {#data-grant}

A <dfn>Data Grant</dfn> provides an [=Agent=] with a detailed description
of access that has been granted to them for a specific type of data,
identified by a [=Shape Tree=]. Each [=Data Grant=] is associated with
a single [=Access Grant=].

A [=Data Grant=] may inherit from another [=Data Grant=], when the 
[=shape tree=] associated with the "parent" [=Data Grant=] has one or
more [=Shape Tree References=].

Each [=Data Grant=] has an assigned scope (`interop:scopeOfGrant`), which
determines how permissions are assigned.

When recording a [=Data Grant=] via [[SAI-API#grants-recordgrant]]:

* There should be an [=Access Need=] linked via `interop:satisfiesAccessNeed` that
    belongs to an [=Access Need Group=] linked to the same [=Access Grant=].
* [=Access Need=] and [=Data Grant=] must have the same `interop:registeredShapeTree`

When a [=Social Agent=] grants another [=Agent=] access to data that was shared
with them, a [=Delegated Data Grant=] is used instead.

[=Data Grants=] are immutable. If a [=Data Grant=]
needs to change, it should be replaced.

[Class Definition](interop.ttl#DataGrant) -
[Shape Definition](interop.shex#DataGrantShape) -
[Shape Tree Definition](interop.tree#DataGrantTree)

<table class="classinfo data" align="left" id="classDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dataOwner</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that owns the data being granted</td>
    </tr>
    <tr>
      <td>registeredAgent</td>
      <td>[Agent](#classAgent)</td>
      <td>The [=Social Agent=] or [=Application=] that has received
      consent</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>[=Data Registration=] for the [=shape tree=] that access
      will be granted to</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>[DataRegistration](#classDataRegistration)</td>
      <td>[=Data Registration=] for `registeredShapeTree` that the
      [=Data Grant=] applies to</td>
    </tr>
    <tr>
      <td>hasDataResource</td>
      <td>Data resource of `registeredShapeTree`</td>
      <td>Links to a resource of `registeredShapeTree`.</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Modes of access granted to the target data at hasRegistration</td>
    </tr>
    <tr>
      <td>creatorAccessMode</td>
      <td>`acl:Read, acl:Write, acl:Control, acl:Append`</td>
      <td>Additional access mode assigned to the creator of a
        data instance. Adds to the set of modes linked via 
        `interop:accessMode`. Only valid when `accessMode` includes
         `acl:Write` or `acl:Append`</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td>interop:All, interop:AllFromAgent, interop:AllFromRegistry, 
      interop:SelectedFromRegistry, interop:Inherited</td>
      <td>Identifies the [=access scope=] of the [=Data Grant=]</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Access Need=] satisfied by the [=Data Grant=]</td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>Instance of registeredShapeTree</td>
      <td>Links to a [=Data Instance=] of registeredShapeTree.</td>
    </tr>
    <tr>
      <td>inheritsFromGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to another [=Data Grant=] whose registeredShapeTree
      references the shape tree associated with the current
      [=Data Grant=].</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Projects at
  https://alice.example/agents/2f2f3628/40d038ea -
  <a href="snippets/alice.example/40d038ea.ttl">View</a> 
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/40d038ea.ttl
  highlight: turtle
  show: 12-25
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Tasks at
  https://alice.example/agents/2f2f3628/0945218b -
  <a href="snippets/alice.example/0945218b.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0945218b.ttl
  highlight: turtle
  show: 13-25
  </pre>
</figure>

## Delegated Data Grant ## {#delegated-data-grant}

A <dfn>Delegated Data Grant</dfn> is a sub-class of [=Data Grant=]
used when a grantee re-shares or "delegates" access they've
received to another [=Agent=]. The most common use case 
is when Alice shares access with Bob, and Bob delegates
that access to his project management application.

[=Delegated Data Grants=] are immutable. If a [=Delegated Data Grant=]
needs to change, it should be replaced.

[Class Definition](interop.ttl#DelegatedDataGrant) -
[Shape Definition](interop.shex#DelegatedDataGrantShape) -
[Shape Tree Definition](interop.tree#DelegatedDataGrantTree)

<table class="classinfo data" align="left" id="classDelegatedDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>delegationOfGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>[=Data Grant=] that is being delegated</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Projectron to access Projects 
  that Bob shared with her at https://alice.example/agents/2f2f3628/fe818190 -
  <a href="snippets/alice.example/fe818190.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/fe818190.ttl
  highlight: turtle
  show: 13-26
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Projectron to access Tasks 
  that Bob shared with her at https://alice.example/agents/2f2f3628/017d6a07 -
  <a href="snippets/alice.example/017d6a07.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/017d6a07.ttl
  highlight: turtle
  show: 13-26
  </pre>
</figure>

## Data Access Scopes ## {#access-scopes}

Each [=Data Consent=] applies to a specific type of data, 
identified by a [=shape tree=]. The amount of access consented for data of that type is specified by the
<dfn>Access Scope</dfn>, via `interop:scopeOfConsent`.

[=Data Grants=] generated from a given [=Data Consent=] are influenced by the [=access scope=] for that [=Data Consent=].
[=Data Grants=] utilize a subset of the [=access scopes=] used for [=Data Consents=], identifying the assigned scope
via `interop:scopeOfGrant`.

<table class="data tree" align="left">
  <col>
  <col>
  <thead>
    <tr>
      <th>Scope</th>
      <th>Consent</th>
      <th>Grant</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="#scope-all"><b>`All`</b></a></td>
      <td>Yes</td>
      <td><b>No</b></td>
      <td>All of the owner's data of a specified type, and all data shared with the owner of that type, across the owner's registries</td>
    </tr>
    <tr>
      <td><a href="#scope-fromagent"><b>`AllFromAgent`</b></a></td>
      <td>Yes</td>
      <td><b>No</b></td>
      <td>All data of a given type shared by a specified [=Social Agent=] with the owner, across that [=Social Agent's=] registries</td>
    </tr>
    <tr>
      <td><a href="#scope-fromregistry"><b>`AllFromRegistry`</b></a></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>All of the data owner's data of a specified type in a specified [=Data Registry=]</td>
    </tr>
    <tr>
      <td><a href="#scope-selected"><b>`SelectedFromRegistry`</b></a></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Only specified [=Data Instances=] of the data owner's of a given type in a specified [=Data Registry=]</td>
    </tr>
    <tr>
      <td><a href="#scope-inherited"><b>`Inherited`</b></a></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Only [=Data Instances=] of the data owner's that are associated with [=Data Instances=] allowed by another consent or grant</td>
    </tr>
  </tbody>
</table>

### <code>All</code> ### {#scope-all}

The `interop:All` [=access scope=] includes all data of a specified type 
belonging to a given data owner, and all data of that same type shared with the data 
owner, across all of the data owner’s registries.

<b>Shapes:</b> [DataConsentAllShape](interop.shex#DataConsentAllShape)

The follow example illustrates *Alice's* consent to give *Projectron* access to 
data of type `pm-shapetrees:ProjectTree` with a scope of `interop:All`. Since 
Alice has two [=Data Registries=] and Bob has shared projects with her, several
[=Data Grants=] will be generated from this [=Data Consent=] and shared 
with Projectron.

Note: `interop:All` is only valid for a [=Data Consent=].
Generated [=Data Grants=] use the more specific `interop:AllFromRegistry`
for each unique [=Data Registry=], including Bob's.

<figure>
  <figcaption>Alice's [=Data Consent=] for Projectron to access Projects
    at https://alice.example/consents/54a1b6a0 -
    <a href="snippets/alice.example/54a1b6a0.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/54a1b6a0.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 19
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Projects in her 
  Work [=Data Registry=] at
  https://alice.example/agents/2f2f3628/40d038ea -
  <a href="snippets/alice.example/40d038ea.ttl">View</a> 
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/40d038ea.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 21
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access her Projects in
  her Personal [=Data Registry=] at
  https://alice.example/agents/2f2f3628/a0623c8f -
  <a href="snippets/alice.example/a0623c8f.ttl">View</a> 
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/a0623c8f.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 21
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Projectron to access Projects 
  that Bob shared with her at https://alice.example/agents/2f2f3628/fe818190 -
  <a href="snippets/alice.example/fe818190.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/fe818190.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 22
  </pre>
</figure>

### <code>AllFromAgent</code> ### {#scope-fromagent}

The `interop:AllFromAgent` [=access scope=] includes all data of a given type 
owned and shared by a specified [=Social Agent=], across all of their 
[=Data Registries=]. Essentially, Alice can use this scope to delegate
any access that she has been given to another [=Social Agent's=] 
data (e.g. Bob), to another [=Agent=] of her choosing.

The [=Social Agent=] whose access is being shared is identified via
`interop:dataOwner`.

<b>Shapes:</b> [DataConsentAllFromAgentShape](interop.shex#DataConsentAllFromAgentShape)

The following example illustrates *Alice's* consent to give Performchart access to
data of type `pm-shapetrees:ProjectTree` with a scope of `interop:AllFromAgent`
and an `interop:dataOwner` of *Bob*.

Note: While Bob has granted Alice the ability to manipulate his project data,
Alice grants Performchart a narrower scope of read-only access.

<figure>
  <figcaption>Alice's [=Data Consent=] for Performchart to access Projects
    that Bob shared with her at https://alice.example/consents/0e36ba8f -
    <a href="snippets/alice.example/0e36ba8f.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0e36ba8f.ttl
  highlight: turtle
  show: 14-25
  line-highlight: 20
  </pre>
</figure>

Bob has shared data of this type with Alice from
only one [=Data Registry=], which he shared with her previously
through her [=Agent Registration=] in his [=Agent Registry=].

<figure>
  <figcaption>Bob's [=Data Grant=] for Alice to access Projects 
  at https://bob.example/agents/255aa181/b2b6a645 -
  <a href="snippets/bob.example/b2b6a645.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/bob.example/b2b6a645.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 22
  </pre>
</figure>

Alice generates one [=Delegated Data Grant=] for Performchart to access
the Project data that Bob shared with her, which she stores in
the [=Agent Registration=] for Performchart in her [=Agent Registry=].
It is marked as a delegation of Bob's [=Data Grant=] 
via `interop:delegationOfGrant`.

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Performchart to access Projects 
  that Bob shared with her at https://alice.example/agents/c2328cdd/efc426c9 -
  <a href="snippets/alice.example/efc426c9.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/efc426c9.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 21
  </pre>
</figure>

### <code>AllFromRegistry</code> ### {#scope-fromregistry}

The `interop:AllFromRegistry` [=access scope=] includes all 
data of a specified type in a specified [=Data Registry=] of a given data owner. 
Since a [=Data Registry=] can only have one [=Data Registration=] per [=shape tree=],
this scope provide access to all [=Data Instances=] in the [=Data Registration=]
of the [=shape tree=] specified via `interop:registeredShapeTree`.

<b>Shapes:</b> [DataConsentAllFromRegistryShape](interop.shex#DataConsentAllFromRegistryShape) -
[DataGrantAllFromRegistryShape](interop.shex#DataGrantAllFromRegistryShape)

The following example illustrates *Bob's* consent to give Alice access to
all data of type `pm-shapetrees:ProjectTree` in the [=Data Registry=] he uses
for his professional work.

<figure>
  <figcaption>Bob's [=Data Consent=] at https://bob.example/consents/e4b1b154 
  for Alice to access his Project data - 
  <a href="snippets/bob.example/e4b1b154.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/bob.example/e4b1b154.ttl
  highlight: turtle
  show: 13-25
  line-highlight: 20
  </pre>
</figure>

The following [=Data Grant=] is generated for Alice based on the above 
[=Data Consent=], and stored in the [=Agent Registration=] for Alice in
Bob's [=Agent Registry=].

<figure>
  <figcaption>Bob's [=Data Grant=]   
  at https://bob.example/agents/255aa181/b2b6a645 
  for Alice to access his work Project data -
  <a href="snippets/bob.example/b2b6a645.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/bob.example/b2b6a645.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 22
  </pre>
</figure>

### <code>SelectedFromRegistry</code> ### {#scope-selected}

The `interop:SelectedFromRegistry` [=access scope=] includes only
specific [=Data Instances=] of the [=shape tree=] specified via 
`interop:registeredShapeTree` in the [=Data Registry=] of a given 
data owner.

<b>Shapes:</b> [DataConsentSelectedFromRegistryShape](interop.shex#DataConsentSelectedFromRegistryShape) -
[DataGrantSelectedFromRegistryShape](interop.shex#DataGrantSelectedFromRegistryShape)

The following example illustrates *Jose's* consent for Alice to access
two specific [=Data Instances=] of `pm-shapetrees:ProjectTree` in the 
[=Data Registry=] he uses for his professional work.

<figure>
  <figcaption>Jose's [=Data Consent=] at https://jose.example/consents/69095550 
  for Alice to access his Project data - 
  <a href="snippets/jose.example/69095550.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/jose.example/69095550.ttl
  highlight: turtle
  show: 13-27
  line-highlight: 20
  </pre>
</figure>

The following [=Data Grant=] is generated for Alice based on the above
[=Data Consent=], and stored in the [=Agent Registration=] for Alice in
Jose's [=Agent Registry=].

<figure>
  <figcaption>Jose's [=Data Grant=]   
  at https://jose.example/agents/efba320e/2aa21a8c 
  to share specific work projects with Alice -
  <a href="snippets/jose.example/2aa21a8c.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/jose.example/2aa21a8c.ttl
  highlight: turtle
  show: 14-28
  line-highlight: 23
  </pre>
</figure>

### <code>Inherited</code> ### {#scope-inherited}

The `interop:Inherited` [=access scope=] is unique in that it depends
on the existence of another [=Data Consent=] with a scope of
`interop:All`, `interop:AllFromAgent`, `interop:AllFromRegistry`, or
`interop:SelectedFromRegistry`. 

When a [=Data Consent=] exists with
one of those scopes, and its `interop:registeredShapeTree` specifies
one or more virtual hierarchies via `st:references`, a corresponding
[=Data Consent=] with a scope of `interop:Inherited` can be created
for each distinct reference.

<b>Shapes:</b> [DataConsentInheritedShape](interop.shex#DataConsentInheritedShape) -
[DataGrantInheritedShape](interop.shex#DataGrantInheritedShape)

<figure>
  <figcaption>Alice's [=Data Consent=] for Projectron to access Projects
    at https://alice.example/consents/54a1b6a0 -
    <a href="snippets/alice.example/54a1b6a0.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/54a1b6a0.ttl
  highlight: turtle
  show: 12-22
  line-highlight: 19
  </pre>
</figure>

The [=shape tree=] `pm-shapetrees:ProjectTree` specifies one virtual hierarchy
via `st:references`, indicating that a Project [=Data Instance=] virtually
includes Task instances of `pm-shapetrees:TaskTree` through the 
predicate `pm:hasTask`.

<figure>
  <figcaption>
  ProjectTree definition at https://data.example/shapetrees/pm-shapetrees.tree -
  <a href="snippets/data.example/pm-shapetrees.tree">View Definition</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/data.example/pm-shapetrees.tree
  highlight: turtle
  show: 10-17
  </pre>
</figure>

Consequently, a [=Data Consent=] with `interop:Inherited` scope can be created
for `pm-shapetrees:TaskTree`.

<figure>
  <figcaption>Alice's [=Data Consent=] for Projectron to access Tasks
    at https://alice.example/consents/0e4cb692 -
    <a href="snippets/alice.example/0e4cb692.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0e4cb692.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 19
  </pre>
</figure>

[=Data Grants=] for Projects and their associated Tasks can then be generated
for Projectron based on the above [=Data Consents=].

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Projects in her 
  Work [=Data Registry=] at
  https://alice.example/agents/2f2f3628/40d038ea -
  <a href="snippets/alice.example/40d038ea.ttl">View</a> 
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/40d038ea.ttl
  highlight: turtle
  show: 12-23
  line-highlight: 21
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Tasks associated 
  with consented Work Projects at
  https://alice.example/agents/2f2f3628/0945218b -
  <a href="snippets/alice.example/0945218b.ttl">View</a> 
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0945218b.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 21
  </pre>
</figure>

## Access Invitation ## {#datamodel-access-invitation}

An <dfn>Access Invitation</dfn> is a subclass of [=Access Grant=] used when
a [=Social Agent=] wishes to grant access to another [=Social Agent=] whose
decentralized [=identity=] is unknown to them, or may not exist yet, so they
must be first invited through another channel (such as phone or email).

Like an [=Access Grant=], an [=Access Invitation=] links to access
criteria detailed in one or more [=Access Need Groups=], with
associated [=Data Grants=] or [=Trusted Grants=] indicating the
intended access to be granted.

However, instead of linking to an [=Access Grant Subject=], an
[=Access Invitation=] links to one or more [=Access Invitation Channels=].

Each channel represents a mechanism through which the invitation can
be delivered and validated. The mechanism is designed so that multiple
channels may be validated before an invitation is confirmed and
converted to an [=Access Grant=].

[Class Definition](interop.ttl#AccessInvitation) -
[Shape Definition](interop.shex#AccessInvitationShape) -
[Shape Tree Definition](interop.tree#AccessInvitationTree)

<table class="classinfo data" align="left" id="classAccessInvitation">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that registered the [=Access Invitation=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to create the [=Access Invitation=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Invitation=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Invitation=] was updated</td>
    </tr>
    <tr>
      <td>expiresAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Invitation=] expires</td>
    </tr>
    <tr>
      <td>hasAccessInvitationChannel</td>
      <td>[AccessInvitationChannel](#classAccessInvitationChannel)</td>
      <td>Links to an [=Access Invitation Channel=]</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>Links to an [=Access Need Group=] associated with
      the [=Access Invitation=].</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to a [=Data Grant=] associated with the
      [=Access Invitation=].</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>An [=Access Invitation=] at
  https://alice.example/grants/08c5ae76-6c83-46f8-8e1d-eb14219e7f5f</figcaption>
  <pre class=include-code>
  path: snippets/alice.example/08c5ae76-6c83-46f8-8e1d-eb14219e7f5f.ttl
  highlight: turtle
  show: 13-27
  </pre>
</figure>

## Access Invitation Channel ## {#datamodel-access-invitation-channel}

An <dfn>Access Invitation Channel</dfn> represents a mechanism through
which an [=Access Invitation=] can be delivered and validated.

[Class Definition](interop.ttl#AccessInvitationChannel) -
[Shape Definition](interop.shex#AccessInvitationChannelShape)

<table class="classinfo data" align="left" id="classAccessInvitationChannel">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>rdf:type</td>
      <td>interop:PhoneInvitationChannel,
      interop:EmailInvitationChannel,
      interop:SMSInvitationChannel,
      interop:OfflineInvitationChannel,
      interop:LDNInvitationChannel</td>
      <td>Each channel is represented by a subClassOf
      AccessInvitationChannel</td>
    </tr>
    <tr>
      <td>channelTarget</td>
      <td>xsd:string</td>
      <td>Target used when validating the channel</td>
    </tr>
    <tr>
      <td>channelCode</td>
      <td>xsd:string</td>
      <td>Code used for channel validation</td>
    </tr>
    <tr>
      <td>isValidated</td>
      <td>xsd:boolean</td>
      <td>Indicates whether the channel has been validated</td>
    </tr>
    <tr>
      <td>remainingAttempts</td>
      <td>xsd:integer</td>
      <td>Number of allowed validation attempts remaining</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>[=Access Invitation Channels=] in the [=Access Invitation=] at
  https://alice.example/grants/08c5ae76-6c83-46f8-8e1d-eb14219e7f5f</figcaption>
  <pre class=include-code>
  path: snippets/alice.example/08c5ae76-6c83-46f8-8e1d-eb14219e7f5f.ttl
  highlight: turtle
  show: 29-41
  </pre>
</figure>

## Access Consent Registry ## {#access-consent-registry}

An <dfn>Access Consent Registry</dfn> is a collection of [=Access Consents=].

The [=Access Consent Registry=] is linked to a [=Social Agent=] via their [=Registry Set=].

An [=Access Consent Registry=] links to any number of registered [=Access Consents=].

[Class Definition](interop.ttl#AccessConsentRegistry) -
[Shape Definition](interop.shex#AccessConsentRegistryShape) -
[Shape Tree Definition](interop.tree#AccessConsentRegistryTree)

<table class="classinfo data" align="left" id="classAccessConsentRegistry">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRegistration</td>
      <td>[Registration](interop.ttl#Registration)</td>
      <td>Link to associated [=Access Consents=]</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>An [=Access Consent Registry=] at 
  https://alice.example/consents/ -
  <a href="snippets/alice.example/consents.ttl">View</a></figcaption>
  <pre class=include-code>
  path: snippets/alice.example/consents.ttl
  highlight: turtle
  show: 4-11
  </pre>
</figure>

### Resource Hierarchy ### {#consents-hierarchy}

<table class="data tree" align="left">
  <col>
  <col>
  <col>
  <col>
  <thead>
    <tr>
      <th>Resource</th>
      <th>Class</th>
      <th>Shape</th>
      <th>Shape Tree</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code><a href="snippets/alice.example/consents.ttl">consents/</a></code></td>
      <td>[AccessConsentRegistry](#classAccessConsentRegistry)</td>
      <td>[AccessConsentRegistryShape](interop.shex#AccessConsentRegistryShape)</td>
      <td>[AccessConsentRegistryTree](interop.tree#AccessConsentRegistryTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/e2765d6c.ttl">e2765d6c/</a></code></td>
      <td>[AccessConsent](#classAccessConsent)</td>
      <td>[AccessConsentShape](interop.shex#AccessConsentShape)</td>
      <td>[AccessConsentTree](interop.tree#AccessConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/54a1b6a0.ttl">54a1b6a0/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/0e4cb692.ttl">0e4cb692/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/47e07897.ttl">47e07897/</a></code></td>
      <td>[AccessConsent](#classAccessConsent)</td>
      <td>[AccessConsentShape](interop.shex#AccessConsentShape)</td>
      <td>[AccessConsentTree](interop.tree#AccessConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/55363f56.ttl">55363f56/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/935458cf.ttl">935458cf/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/d577d117.ttl">d577d117/</a></code></td>
      <td>[AccessConsent](#classAccessConsent)</td>
      <td>[AccessConsentShape](interop.shex#AccessConsentShape)</td>
      <td>[AccessConsentTree](interop.tree#AccessConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/2d1568fb.ttl">2d1568fb/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/5ca4692b.ttl">5ca4692b/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/4460dce3.ttl">4460dce3/</a></code></td>
      <td>[AccessConsent](#classAccessConsent)</td>
      <td>[AccessConsentShape](interop.shex#AccessConsentShape)</td>
      <td>[AccessConsentTree](interop.tree#AccessConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/f800b10c.ttl">f800b10c/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/ec6057d9.ttl">ec6057d9/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/cce01253.ttl">cce01253/</a></code></td>
      <td>[AccessConsent](#classAccessConsent)</td>
      <td>[AccessConsentShape](interop.shex#AccessConsentShape)</td>
      <td>[AccessConsentTree](interop.tree#AccessConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/8f178288.ttl">8f178288/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/6531c8e2.ttl">6531c8e2/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/0e36ba8f.ttl">0e36ba8f/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/ca14a518.ttl">ca14a518/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/3e94161f.ttl">3e94161f/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/60e37fe3.ttl">60e37fe3/</a></code></td>
      <td>[DataConsent](#classDataConsent)</td>
      <td>[DataConsentShape](interop.shex#DataConsentShape)</td>
      <td>[DataConsentTree](interop.tree#DataConsentTree)</td>
    </tr>
  </tbody>
</table>

The [=Access Consent Registry=] resources MAY use any resource or subject name.

The resource names for [=Access Grants=] <em class="rfc2119">SHOULD</em> 
be unpredictable.
